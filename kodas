#include <iomanip>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <random> //atsitiktiniam skaiciui rasti
#include <fstream>

#include "bufer_nusk.h"

using std::cin;
using std::cout;
using std::endl;
using std::fixed;
using std::ifstream;
using std::istringstream; // stringe esančių žodžių sk skaičiavimui
using std::left;
using std::mt19937;
using std::random_device;
using std::right;
using std::setprecision;
using std::setw;
using std::sort;
using std::string;
using std::uniform_int_distribution;
using std::vector;
using std::ws;
// using std::out;
using std::ofstream;
using std::stringstream;
using std::to_string;

struct Studentas
{
    string var;
    string pav;
    vector<int> paz;
    int egz;
    float gal;
    float med;
};

double Mediana(const Studentas &s)
{
    vector<int> visi;
    visi = s.paz;
    visi.push_back(s.egz);
    sort(visi.begin(), visi.end());
    if (visi.size() % 2 != 0)
    {
        return visi[visi.size() / 2];
    }
    else
    {
        return (float(visi[visi.size() / 2]) + visi[(visi.size() / 2) - 1]) / 2;
    }
}

bool paz_tikrinimas(int laik_paz)
{
    if (cin.fail()) // naudojamas patikrinti ar inputas teisingas.
    {
        cin.clear();
        cin.ignore(1000, '\n');
        cout << "Ivedete ne skaiciu. Iveskite skaiciu." << endl;
        return false;
    }
    if (laik_paz > 0 && laik_paz <= 10)
    {
        return true;
    }
    else
    {
        cout << "Netinkamas skaicius. Pabandykite dar karta." << endl;
        return false;
    }
}

int atsitiktinis_sk()
{
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dist(1, 10); // uztikrina, kad skaiciai butu butent nuo 1 iki 10.
    return dist(gen);
}

bool rusiavimas(Studentas Pirmas, Studentas Antras)
{
    if (Pirmas.var < Antras.var)
    {
        return true;
    }
    else if (Pirmas.pav < Antras.pav)
    {
        return true;
    }
    else
        return false;
}

Studentas Stud_iv()
{
    int m, laik_paz, suma = 0;
    string ats;
    Studentas Pirmas;
    cout << "Prasau ivesti studento duomenis: " << endl;
    cout << "Vardas: ";
    cin >> Pirmas.var;
    cout << "Pavarde: ";
    cin >> Pirmas.pav;
    cout << "Ar norite, kad " << Pirmas.var << " pazymiai butu generuojami atsitiktinai (T arba N)? " << endl;
    cin >> ats;

    if (ats == "T")
    {
        bool dar = true;
        int paz = 1;
        while (dar)
        {
            if (paz == 1)
            {
                int x = atsitiktinis_sk();
                cout << "Sugeneruotas " << paz << "-as pazymys yra " << x << endl;
                Pirmas.paz.push_back(x);
                suma += x;
                paz += 1;
            }
            else
            {
                cout << "Ar sugeneruoti dar viena pazymi (T arba N)?" << endl;
                cin >> ats;
                if (ats == "T")
                {
                    int x = atsitiktinis_sk();
                    cout << "Sugeneruotas " << paz << " yra " << x << endl;
                    Pirmas.paz.push_back(x);
                    suma += x;
                    paz += 1;
                }
                else
                {
                    dar = false;
                }
            }
        }
        int x = atsitiktinis_sk();
        cout << "Sugeneruotas egzamino rezultatas yra :" << x << endl;
        Pirmas.egz = x;
        Pirmas.gal = double(suma) / double(Pirmas.paz.size()) * 0.4 + 0.6 * Pirmas.egz;
        Pirmas.med = double(Mediana(Pirmas)) * 0.4 + 0.6 * Pirmas.egz;

        return Pirmas;
    }
    else
    {
        bool yra = true;
        int k = 1;
        while (yra)
        {
            if (k == 1)
            {
                bool tinkamas = false;
                while (!tinkamas)
                {
                    cout << "Iveskite " << k << " pazymi:";
                    cin >> laik_paz;
                    if (paz_tikrinimas(laik_paz) == true)
                    {
                        Pirmas.paz.push_back(laik_paz);
                        suma += laik_paz;
                        tinkamas = true;
                        k += 1;
                    }
                    else
                    {
                        continue;
                    }
                }
            }
            else
            {
                cout << "Ar " << Pirmas.var << " dar turi pazymiu (T arba N)?" << endl;
                cin >> ats;
                if (ats == "T")
                {
                    bool tinkamas = false;
                    while (!tinkamas)
                    {
                        cout << "Iveskite " << k << " pazymi:";
                        cin >> laik_paz;
                        if (paz_tikrinimas(laik_paz) == true)
                        {
                            Pirmas.paz.push_back(laik_paz);
                            suma += laik_paz;
                            tinkamas = true;
                            k += 1;
                        }
                        else
                        {
                            continue;
                        }
                        Pirmas.paz.push_back(laik_paz);
                        suma += laik_paz;
                    }
                }
                else
                {
                    yra = false;
                }
            }
        }
        bool tinkamas = false;
        int egz;
        while (!tinkamas)
        {
            cout << "Koks egzamino razultatas :";
            cin >> egz;
            if (paz_tikrinimas(egz) == true)
            {
                Pirmas.egz = egz;
                Pirmas.gal = double(suma) / double(Pirmas.paz.size()) * 0.4 + 0.6 * Pirmas.egz;
                Pirmas.med = double(Mediana(Pirmas)) * 0.4 + 0.6 * Pirmas.egz;
                tinkamas = true;
            }
            else
            {
                continue;
            }
        }
        return Pirmas;
    }
}

void failu_generavimas(int eil, int paz)
{
    string fvardas = "studentai" + to_string(eil) + ".txt";
    ofstream out(fvardas);
    out << "Vardas Pavarde ";
    for (int i = 1; i <= paz; i++)
    {
        out << "ND" << i << " ";
    }
    out << "Egz" << endl;

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(1, 10);

    for (int i = 1; i <= eil; i++)
    {
        out << "Vardas" << i << " Pavarde" << i << " ";
        for (int j = 1; j <= paz; j++)
        {
            out << dist(gen) << " ";
        }
        out << dist(gen) << endl;
    }
    out.close();
}

bool islaike(const Studentas &s)
{
    return s.gal >= 5.0;
}

void spausdink_studenta(ofstream &out, const Studentas &s, string tipas)
{
    out << setw(15) << left << s.pav << setw(11) << left << s.var;
    if (tipas == "V")
    {
        out << setw(10) << fixed << setprecision(2) << s.gal;
    }
    if (tipas == "M")
    {
        out << setw(10) << fixed << setprecision(2) << s.med;
    }
    if (tipas == "A")
    {
        out << setw(10) << fixed << setprecision(2) << s.gal << setw(10) << fixed << setprecision(2) << s.med;
    }
    out << endl;
}

int main()
{
    vector<Studentas> Grupe;
    string pas; // naudotojo pasirinkimas.
    cout << "Ar noretumete studentus irasyti pats ar nuskaityti is failo (p arba f)?" << endl;
    cin >> pas;

    if (pas == "p")
    {
        cout << "Kiek studentu yra grupeje? ";
        int n;
        cin >> n;
        for (auto z = 0; z < n; z++)
        {
            Grupe.push_back(Stud_iv());
        }
    }
    int sk;
    if (pas == "f")
    {

        cout << "Sugeneruosime 5 skirtingo dydzio failus. " << endl;
        cout << "Kiek pazymiu generuojam kiekvienam studentui? ";
        cin >> sk;
        cout << "Generuojami failai..." << endl;
        failu_generavimas(10000, sk);
        failu_generavimas(100000, sk);
        failu_generavimas(1000000, sk);
        failu_generavimas(10000000, sk);
        stringstream buffer = bufer_nusk("studentai10000.txt");
        string eil;
        getline(buffer, eil);
        while (getline(buffer, eil))
        {
            Studentas stud;
            int paz, suma = 0;
            istringstream iss(eil); // paverčiame eilutę į objektą.
            iss >> stud.var >> stud.pav;
            while (iss >> paz)
            {
                stud.paz.push_back(paz);
                suma += paz;
            }
            suma -= paz;
            stud.egz = stud.paz.back();
            stud.paz.pop_back();
            stud.gal = double(suma) / double(stud.paz.size()) * 0.4 + 0.6 * stud.egz;
            stud.med = double(Mediana(stud)) * 0.4 + 0.6 * stud.egz;
            Grupe.push_back(stud);
        }
    }

    vector<Studentas> moksliukai;
    vector<Studentas> nemoksos;
    for (auto &stud : Grupe)
    {
        if (islaike(stud))
        {
            moksliukai.push_back(stud);
        }
        else
        {
            nemoksos.push_back(stud);
        }
    }
    string pasirinkimas;

    // sort(Grupe.begin(), Grupe.end(), rusiavimas);

    // ofstream out("rezultatai.txt");

    ofstream outm("moksliukai.txt");
    ofstream outn("nemoksos.txt");
    cout << "Ar noretumete gauti tik vidurki (V), tik mediana (M) ar abu (A)? ";
    cin >> pasirinkimas;
    outn << setw(16) << left << "Pavarde " << setw(16) << left << "Vardas ";
    outm << setw(16) << left << "Pavarde " << setw(16) << left << "Vardas ";
    if (pasirinkimas == "V"){ outm << "Gal."<<endl; outn << "Gal."<<endl;}
    if (pasirinkimas == "M"){ outm << "Med."<<endl;  outn << "Med."<<endl;}
    if (pasirinkimas == "A"){ outm << setw(10) << "Gal. "<< setw(10) << " Med."<<endl; outm << setw(10) << "Gal. "<< setw(10) << " Med."<<endl;}

    for (auto &stud : moksliukai)
    {
        spausdink_studenta(outm, stud, pasirinkimas);
    }

    for (auto &stud : nemoksos)
    {
        spausdink_studenta(outn, stud, pasirinkimas);
    }
    /*if (pasirinkimas == "V")
    {
        out << setw(15) << left << "Galutinis (Vid.)" << endl;
        out << "--------------------------------------------------" << endl;
        for(auto &past : moksliukai){
            outm << setw(15) << left << past.pav << " | " << setw(14) << left << past.var << " | ";
            outm << setw(10) << fixed << setprecision(2) << past.gal << endl;
        }
        for(auto &past : nemoksos){
            outn << setw(15) << left << past.pav << " | " << setw(14) << left << past.var << " | ";
            outn << setw(10) << fixed << setprecision(2) << past.gal << endl;
        }
        tinkamas = true;
    }

    else if (pasirinkimas == "M")
    {
        out << setw(15) << left << "Galutinis (Med.)" << endl;
        out << "-------------------------------------------------" << endl;
                    for(auto &past : moksliukai){
            out << setw(15) << left << past.pav << " | " << setw(14) << left << past.var << " | ";
            out << setw(10) << fixed << setprecision(2) << past.gal << endl;
        }
        for(auto &past : nemoksos){
            out << setw(15) << left << past.pav << " | " << setw(14) << left << past.var << " | ";
            out << setw(10) << fixed << setprecision(2) << past.gal << endl;
        }
        for (auto &past : Grupe)
        {
            out << setw(13) << left << past.pav << " | " << setw(13) << left << past.var << " | ";
            out << setw(15) << fixed << setprecision(2) << past.med << endl;
        }
        tinkamas = true;
    }

    else if (pasirinkimas == "A")
    {
        out << "Galutinis (Vid.)" << setw(15) << left << "Galutinis (Med.)" << endl;
        out << "----------------------------------------------------------------" << endl;
        for(auto &past : moksliukai){
            outm << setw(15) << left << past.pav << " | " << setw(14) << left << past.var << " | ";
            outm << setw(10) << fixed << setprecision(2) << past.gal << " | " << setw(15) << past.med << endl;
        }
        for(auto &past : nemoksos){
            outn << setw(15) << left << past.pav << " | " << setw(14) << left << past.var << " | ";
            outn << setw(10) << fixed << setprecision(2) << past.gal << " | " << setw(15) << past.med << endl;
        }
        tinkamas = true;
    }
    else
    {
        cin.clear();
        cin.ignore(1000, '\n');
        cout << "Ivedete netinkama pasirinkima. Pabandykite dar karta." << endl;
    }
}*/
    outm.close();
    outn.close();
}

