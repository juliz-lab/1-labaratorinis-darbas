#include "mylib.h"

int main()
{
    string pas, arf; // naudotojo pasirinkimas.
    char ats, pagal;
    cout << "Ar noretumete, kad studentai butu saugomi sarase ar vektoriuje (l arba v)?" << endl;
    cin >> pas;
    cout << "Ar noretumete studentus irasyti pats, ar nuskaityti is failo (p arba f)?" << endl;
    cin >> arf;
    if (pas == "l")
    {
        list<Studentas> Grupe;
        list<Studentas> moksliukai, nemoksos;

        if (arf == "p")
        {
            irasysiu_pats(Grupe);
        }

        string pasirinkimas;
        if (arf == "f")
        {
            generuok_failus();
        }
        cout << "Koki faila noretumete nuskaityti: a - 1000, b - 10000, c - 100000, d - 1000000, e - 10000000? ";
        cin >> ats;
        map<char, int> tipai = {{'a', 1000}, {'b', 10000}, {'c', 100000}, {'d', 1000000}, {'e', 10000000}};
        int irasu_sk = tipai[ats];
        string fail_pav = "studentai" + to_string(irasu_sk) + ".txt";

        cout << "Pagal ka rikiuojame? v - vardas, p - pavarde, g - galutinis pazymys: ";
        cin >> pagal;

        cout << "Ar noretumete gauti tik vidurki (v), tik mediana (m) ar abu (a)? ";
        cin >> pasirinkimas;

        auto start = std::chrono::high_resolution_clock::now();
        auto st = start; // visam laikui skaičiuoti
        stringstream buffer = bufer_nusk(fail_pav);
        string eil;
        getline(buffer, eil);

        while (getline(buffer, eil))
        {
            Studentas stud;
            int paz, suma = 0;
            istringstream iss(eil); // paverčiame eilutę į objektą.
            iss >> stud.var >> stud.pav;
            while (iss >> paz)
            {
                stud.paz.push_back(paz);
                suma += paz;
            }
            suma -= paz;
            stud.egz = stud.paz.back();
            stud.paz.pop_back();
            stud.gal = double(suma) / double(stud.paz.size()) * 0.4 + 0.6 * stud.egz;
            stud.med = double(Mediana(stud)) * 0.4 + 0.6 * stud.egz;
            Grupe.push_back(stud);
        }

        std::chrono::duration<double> diff = std::chrono::high_resolution_clock::now() - start; // Skirtumas (s)
        cout << "Failo " << fail_pav << " nuskaitymas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();

        for (auto &stud : Grupe)
        {
            if (islaike(stud))
            {
                moksliukai.push_back(stud);
            }
            else
            {
                nemoksos.push_back(stud);
            }
        }

        diff = std::chrono::high_resolution_clock::now() - start; // Skirtumas (s)
        cout << "Failo " << fail_pav << " studentu padalijimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        rusiuok_list(moksliukai, pagal);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " moksliuku isrusiavimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        rusiuok_list(nemoksos, pagal);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " nemoksu isrusiavimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        spausdink_grupe(moksliukai, pasirinkimas);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " moksliuku spausdinimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        spausdink_grupe(nemoksos, pasirinkimas);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " nemoksu spausdinimas uztruko: " << diff.count() << " s\n";

        diff = std::chrono::high_resolution_clock::now() - st;
        cout << fail_pav << " testo veikimo laikas: " << diff.count() << " s\n";
    }
    else
    {
        vector<Studentas> Grupe;
        vector<Studentas> moksliukai, nemoksos;

        if (arf == "p")
        {
            irasysiu_pats(Grupe);
        }

        string pasirinkimas;
        if (arf == "f")
        {
            generuok_failus();
        }
        cout << "Koki faila noretumete nuskaityti: a - 1000, b - 10000, c - 100000, d - 1000000, e - 10000000? ";
        cin >> ats;
        map<char, int> tipai = {{'a', 1000}, {'b', 10000}, {'c', 100000}, {'d', 1000000}, {'e', 10000000}};
        int irasu_sk = tipai[ats];
        string fail_pav = "studentai" + to_string(irasu_sk) + ".txt";

        cout << "Pagal ka rikiuojame? v - vardas, p - pavarde, g - galutinis pazymys: ";
        cin >> pagal;

        cout << "Ar noretumete gauti tik vidurki (v), tik mediana (m) ar abu (a)? ";
        cin >> pasirinkimas;

        auto start = std::chrono::high_resolution_clock::now();
        auto st = start; // visam laikui skaičiuoti
        stringstream buffer = bufer_nusk(fail_pav);
        string eil;
        getline(buffer, eil);

        while (getline(buffer, eil))
        {
            Studentas stud;
            int paz, suma = 0;
            istringstream iss(eil); // paverčiame eilutę į objektą.
            iss >> stud.var >> stud.pav;
            while (iss >> paz)
            {
                stud.paz.push_back(paz);
                suma += paz;
            }
            suma -= paz;
            stud.egz = stud.paz.back();
            stud.paz.pop_back();
            stud.gal = double(suma) / double(stud.paz.size()) * 0.4 + 0.6 * stud.egz;
            stud.med = double(Mediana(stud)) * 0.4 + 0.6 * stud.egz;
            Grupe.push_back(stud);
        }

        std::chrono::duration<double> diff = std::chrono::high_resolution_clock::now() - start; // Skirtumas (s)
        cout << "Failo " << fail_pav << " nuskaitymas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();

        for (auto &stud : Grupe)
        {
            if (islaike(stud))
            {
                moksliukai.push_back(stud);
            }
            else
            {
                nemoksos.push_back(stud);
            }
        }

        diff = std::chrono::high_resolution_clock::now() - start; // Skirtumas (s)
        cout << "Failo " << fail_pav << " studentu padalijimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        rusiuok_vect(moksliukai, pagal);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " moksliuku isrusiavimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        rusiuok_vect(nemoksos, pagal);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " nemoksu isrusiavimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        spausdink_grupe(moksliukai, pasirinkimas);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " moksliuku spausdinimas uztruko: " << diff.count() << " s\n";

        start = std::chrono::high_resolution_clock::now();
        spausdink_grupe(nemoksos, pasirinkimas);
        diff = std::chrono::high_resolution_clock::now() - start;
        cout << "Failo " << fail_pav << " nemoksu spausdinimas uztruko: " << diff.count() << " s\n";

        diff = std::chrono::high_resolution_clock::now() - st;
        cout << fail_pav << " testo veikimo laikas: " << diff.count() << " s\n";
    }
}
